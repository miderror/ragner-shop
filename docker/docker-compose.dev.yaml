services:
  postgres:
    image: postgres:17-alpine
    container_name: rg_postgres_dev
    volumes:
      - postgres_data_rg_dev:/var/lib/postgresql/data/
    env_file:
      - ../.env.dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: rg_redis_dev
    command: redis-server --appendonly yes
    volumes:
      - redis_data_rg_dev:/data
    env_file:
      - ../.env.dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: 5s

  admin_panel:
    build:
      context: ..
      dockerfile: docker/python.dev.Dockerfile
    container_name: rg_admin_panel_dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ../:/app
      - static_volume_rg_dev:/app/static
      - media_volume_rg_dev:/app/media
    expose:
      - 8000
    env_file:
      - ../.env.dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  bot:
    build:
      context: ..
      dockerfile: docker/python.dev.Dockerfile
    container_name: rg_bot_dev
    command: python manage.py runbot
    volumes:
      - ../:/app
      - media_volume_rg_dev:/app/media
    env_file:
      - ../.env.dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  worker:
    build:
      context: ..
      dockerfile: docker/python.dev.Dockerfile
    container_name: rg_worker_dev
    command: celery -A backend worker --loglevel info
    volumes:
      - ../:/app
      - media_volume_rg_dev:/app/media
    env_file:
      - ../.env.dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  nginx:
    image: nginx:1.27.5-alpine
    container_name: rg_nginx_dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/templates/default.conf.template:ro
      - static_volume_rg_dev:/app/static:ro
      - media_volume_rg_dev:/app/media:ro
    env_file: 
     - ../.env.dev
    environment:
      NGINX_PORT: 80
      BACKEND_PORT: 8000
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
    depends_on:
      admin_panel:
        condition: service_started
  
volumes:
  postgres_data_rg_dev:
  redis_data_rg_dev:
  static_volume_rg_dev:
  media_volume_rg_dev:
